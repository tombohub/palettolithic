{"version":3,"sources":["components/Shade.jsx","components/Color.jsx","components/Palette.jsx","components/FrameworkItem.jsx","components/FrameworkList.jsx","components/MenuBottom.jsx","components/ColorPicker.tsx","components/MenuBox.jsx","scripts/createPalette.js","scripts/generateTailwind.js","scripts/generateBootstrap.js","scripts/generateCssVariables.js","components/CodeContent.jsx","components/CodeBox.jsx","components/Header.jsx","scripts/sanitizeColor.js","components/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Shade","props","data-name","className","style","backgroundColor","shade","Color","Array","isArray","shades","color","toUpperCase","map","i","key","Palette","colors","Object","keys","palette","id","FrameworkItem","framework","activeFramework","classes","active","nonActive","pseudoClasses","onClick","setActiveFramework","FrameworkList","MenuBottom","href","ColorPicker","onChange","onColorChange","placeholder","MenuBox","chroma","require","names","lights","desat","newSaturation","hex","hsl","h","l","createShades","hue","saturation","light","keyword","Math","round","hueName","toObj","a","value","createPalette","sat","lte","hues","length","hueStep","baseHue","arr","push","createArray","n","floor","createHues","isNaN","forEach","reduce","generateFrameworkObject","assignShades","parseInt","tailwind","generateTailwind","frameworkObject","colorObjects","JSON","stringify","slice","trim","replace","generateBootstrap","variables","obj","entries","generateColorVariables","cssColors","generateCssColors","generateThemeMap","generateCssVariables","CodeContent","useState","copyStatus","setCopyStatus","handleOnClick","e","useEffect","SyntaxHighlighter","registerLanguage","js","scss","css","tailwindCode","text","language","tomorrowNight","bootstrapCode","cssCode","renderCode","CodeBox","Header","sanitizeColor","hexColor","dirtyColor","cleanColor","test","Main","search","useLocation","searchParams","URLSearchParams","colorParam","get","history","useHistory","Sanitize","setColor","setPalette","initialPallete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAYeA,MAVf,SAAeC,GACb,OACE,yBACEC,YAAU,QACVC,UAAU,GACVC,MAAO,CAAEC,gBAAiBJ,EAAMK,UCevBC,MAdf,SAAeN,GACb,QAAKO,MAAMC,QAAQR,EAAMS,SAEvB,yBAAKP,UAAU,qBAAqBD,YAAU,eAC5C,yBAAKC,UAAU,yCAAyCD,YAAU,eAChE,0BAAMC,UAAU,WAAWF,EAAMU,MAAMC,cAAvC,KACCX,EAAMS,OAAOG,KAAI,SAACP,EAAOQ,GAAR,OAChB,kBAAC,EAAD,CAAOC,IAAKD,EAAGR,MAAOA,UCejBU,MAxBf,SAAiBf,GAEf,IAAMgB,EAASC,OAAOC,KAAKlB,EAAMmB,SAKjC,OACE,yBACEC,GAAG,gBACHlB,UAAU,6DAEV,yBACEkB,GAAG,gBACHlB,UAAU,gEAETc,EAAOJ,KAAI,SAACF,EAAOG,GAAR,OACV,kBAAC,EAAD,CAAOC,IAAKD,EAAGJ,OAAQT,EAAMmB,QAAQT,GAAQA,MAAOA,U,MCgD/CW,MA/Df,SAAuBrB,GAmDrB,OACE,wBACEE,UAAS,uEA7CS,SAACoB,EAAWC,GAGhC,IAoBMC,EAAU,SAAAA,GACd,OAAID,IAAoBD,EACfE,EAAQC,OAERD,EAAQE,WAInB,OAAQJ,GACN,IAAK,WACH,OAAOE,EA9BM,CACfC,OAAQ,sCACRC,UACE,4EA4BF,IAAK,YACH,OAAOF,EAzBO,CAChBC,OAAQ,2CACRC,UACE,gFAuBF,IAAK,MACH,OAAOF,EApBC,CACVC,OAAQ,2CACRC,UACE,gFAkBF,QACE,MAAO,IAOPC,CAAc3B,EAAMsB,UAAWtB,EAAMuB,iBAD9B,YAGTK,QAAS,kBAAM5B,EAAM6B,mBAAmB7B,EAAMsB,aAE7CtB,EAAMsB,YClCEQ,MAtBf,SAAuB9B,GACrB,OACE,wBAAIE,UAAU,SACZ,kBAAC,EAAD,CACEoB,UAAU,WACVC,gBAAiBvB,EAAMuB,gBACvBM,mBAAoB7B,EAAM6B,qBAE5B,kBAAC,EAAD,CACEP,UAAU,YACVC,gBAAiBvB,EAAMuB,gBACvBM,mBAAoB7B,EAAM6B,qBAE5B,kBAAC,EAAD,CACEP,UAAU,MACVC,gBAAiBvB,EAAMuB,gBACvBM,mBAAoB7B,EAAM6B,uB,QCvBnB,SAASE,IACtB,OACE,4CAEE,6BACA,kBAAC,IAAD,CAAc7B,UAAU,WAAY,IACpC,uBAAG8B,KAAK,4CAA4C9B,UAAU,aAC3D,IADH,W,wBCOS,SAAS+B,EAAYjC,GAChC,OACI,oCACA,kBAAC,IAAD,CAAgBU,MAAOV,EAAMU,MAAOwB,SAAUlC,EAAMmC,gBACpD,kBAAC,IAAD,CACEC,YAAa,WACb1B,MAAOV,EAAMU,MACbwB,SAAUlC,EAAMmC,cAChBjC,UAAU,4CCoBLmC,MAzBf,SAAiBrC,GACf,OACE,oCACE,yBAAKE,UAAU,yBACb,kBAAC+B,EAAD,CAAavB,MAAOV,EAAMU,MAAOyB,cAAenC,EAAMmC,gBAQtD,kBAAC,EAAD,CACEZ,gBAAiBvB,EAAMuB,gBACvBM,mBAAoB7B,EAAM6B,qBAG5B,yBAAK3B,UAAU,SACb,kBAAC6B,EAAD,U,QCtBJO,EAASC,EAAQ,IAKjBC,EAAQ,CACZ,MACA,SACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,SACA,SACA,OACA,OAoBIC,EAAS,CAAC,IAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IA0CxDC,EAAQ,SAACC,GAAD,OAAmB,SAACC,GAAS,IAAD,EACtBN,EAAOM,GAAKC,MADU,mBACjCC,EADiC,KAC3BC,GAD2B,WAExC,OAAOT,EAAOO,IAAIC,EAAGH,EAAeI,GAAGH,QAoBnCI,EAAe,SAACJ,GAAS,IAAD,EACSN,EAAOM,GAAKC,MADrB,mBACrBI,EADqB,KAChBC,EADgB,UAE5B,OAAOT,EAAO7B,KAAI,SAACuC,GACjB,OAAOb,EAAOO,IAAII,EAAKC,EAAYC,GAAOP,UAqBxCQ,EAAU,SAACR,GAAS,IAAD,EACGN,EAAOM,GAAKC,MADf,mBAChBI,EADgB,UAMvB,OAzGc,SAACA,GACf,IAAMpC,EAAIwC,KAAKC,MAAML,EAAM,IAE3B,OADaT,EAAM3B,GAsGD0C,CAAQN,IAKtBO,EAAQ,SAACC,EAAG/C,GAGhB,OADA+C,EADYA,EAAE/C,EAAMI,KAAOJ,EAAMI,IAAM,IAAMJ,EAAMI,KAC1CJ,EAAMgD,MACRD,GAUT,SAASE,EAAcf,GACrB,IAAMlC,EAAQ4B,EAAOM,GACf5B,EAAS,GAFW,EAGFN,EAAMmC,MAHJ,mBAGnBI,EAHmB,KAGdW,EAHc,KAGTC,EAHS,KAKpBC,EAzFW,SAACC,GAClB,IAAMC,EAAU,IAAMD,EAEtB,OAAO,SAACE,GAGN,OArBgB,SAACF,GAEnB,IADA,IAAMG,EAAM,GACHrD,EAAI,EAAGA,EAAIkD,EAAQlD,IAC1BqD,EAAIC,KAAKtD,GAEX,OAAOqD,EAcQE,CAAYL,GAAQnD,KAAI,SAACyD,GAAD,OAAOhB,KAAKiB,OAAOL,EAAUI,EAAIL,GAAW,SAqFtEO,CAAW,GAAXA,CAAetB,GA8B5B,OArBAjC,EAAOmD,KAAK,CACVrD,IAAK,OACL4C,MAAOV,EAAaN,EAAM,IAANA,CAAc,GAAKhC,EAAMkC,UAM1C4B,MAAMvB,IACTa,EAAKW,SAAQ,SAACxB,GACZ,IAAMvC,EAAQ4B,EAAOO,IAAII,EAAKW,EAAKC,GAC7B/C,EAAMsC,EAAQ1C,GACpBM,EAAOmD,KAAK,CACVrD,MACA4C,MAAOV,EAAa,GAAKtC,EAAMkC,YAKzB5B,EAAO0D,OAAOlB,EAAO,IAUnC,SAASmB,EAAwBxD,GAiB/B,IAhBA,IAGMyD,EAAe,SAAClE,GACpB,IAD8B,EAC1BG,EAAI,GACJJ,EAAS,GAFiB,cAGVU,EAAQT,IAHE,IAG9B,2BAAoC,CAAC,IAA1BL,EAAyB,QAClCI,EAAOoE,SAAShE,IAAMR,EACtBQ,EAAU,KAANA,EAAW,IAAMA,EAAI,KALG,8BAS9B,OAAOJ,GAGLqE,EAAW,GACf,MAhBe7D,OAAOC,KAAKC,GAgB3B,eAA4B,CAAvB,IAAMT,EAAK,KACdoE,EAASpE,GAASkE,EAAalE,GAGjC,OAAOoE,EClOT,SAASC,EAAiB5D,GACzB,IAAM6D,EAAkBL,EAAwBxD,GAC1C8D,EAAeC,KAAKC,UAAUH,EAAiB,KAAM,GACzDI,MAAM,GAAI,GACVC,OACAC,QAAQ,cAAe,OACvBA,QAAQ,MAAO,UAajB,MAXkB,yJAMXL,EANW,mBCkDnB,SAASM,EAAkBpE,GACzB,IAAM6D,EAAkBL,EAAwBxD,GAE1CqE,EApDR,SAAgCC,GAC9B,IAAID,EAAY,GAChB,IAAK,IAAM9E,KAAS+E,EAAK,CACvBD,GAAa,KACb,cAA2BvE,OAAOyE,QAAQD,EAAI/E,IAA9C,eAAuD,CAAC,IAAD,sBAA3CL,EAA2C,KAApCuC,EAAoC,KACrD4C,GAAS,WAAQ9E,EAAR,YAAiBL,EAAjB,aAA2BuC,EAA3B,SAIb,OAAO4C,EA2CWG,CAAuBX,GACnCY,EArCR,SAA2BH,GACzB,IAAID,EAAY,GAChB,IAAK,IAAM9E,KAAS+E,EAClBD,GAAS,WAAQ9E,EAAR,cAAmBA,EAAnB,WAEX,OAAO8E,EAgCWK,CAAkBb,GAC9BpE,EAzBR,SAA0B6E,GACxB,IAAIzE,EAAS,GAEb,IAAK,IAAMN,KAAS+E,EAElB,IAAK,IAAMpF,KADXW,GAAU,KACUyE,EAAI/E,GACtBM,GAAM,aAAUN,EAAV,YAAmBL,EAAnB,eAA+BK,EAA/B,YAAwCL,EAAxC,OAIV,MADY,+BAA0BW,GAA1B,KAgBA8E,CAAiBd,GAI7B,MAFmB,UAAMQ,EAAN,eAAsBI,EAAtB,eAAsChF,GCzD3D,SAASmF,EAAqB5E,GAC1B,IAAM6D,EAAkBL,EAAwBxD,GAC5CqE,EAAY,GAChB,IAAK,IAAM9E,KAASsE,EAAiB,CACjCQ,GAAa,KACb,cAA2BvE,OAAOyE,QAAQV,EAAgBtE,IAA1D,eAAmE,CAAC,IAAD,sBAAvDL,EAAuD,KAAhDuC,EAAgD,KAC/D4C,GAAS,YAAS9E,EAAT,YAAkBL,EAAlB,aAA4BuC,EAA5B,SAQjB,MAJa,mCACC4C,EADD,O,oDCuGFQ,MArGf,SAAqBhG,GAAO,MAQUiG,mBAAS,QARnB,mBAQnBC,EARmB,KAQPC,EARO,KAc1B,SAASC,EAAcC,GACrBF,EAAc,UALhBG,qBAAU,WACRH,EAAc,UACb,CAACnG,EAAMmB,QAASnB,EAAMuB,kBAYzBgF,IAAkBC,iBAAiB,aAAcC,KACjDF,IAAkBC,iBAAiB,OAAQE,KAC3CH,IAAkBC,iBAAiB,MAAOG,KAE1C,IAAMC,EACJ,oCACE,kBAAC,kBAAD,CAAiBC,KAAM9B,EAAiB/E,EAAMmB,UAC5C,yBAAKjB,UAAU,oBACb,0BACE0B,QAASwE,EACTlG,UAAU,iIAETgG,KAIP,kBAAC,IAAD,CAAmBY,SAAS,aAAa3G,MAAO4G,KAC7ChC,EAAiB/E,EAAMmB,WAKxB6F,EACJ,oCACE,kBAAC,kBAAD,CAAiBH,KAAMtB,EAAkBvF,EAAMmB,UAC7C,yBAAKjB,UAAU,oBACb,0BACE0B,QAASwE,EACTlG,UAAU,yIAETgG,KAIP,kBAAC,IAAD,CAAmBY,SAAS,OAAO3G,MAAO4G,KACvCxB,EAAkBvF,EAAMmB,WAMzB8F,EACJ,oCACE,kBAAC,kBAAD,CAAiBJ,KAAMd,EAAqB/F,EAAMmB,UAChD,yBAAKjB,UAAU,oBACb,0BACE0B,QAASwE,EACTlG,UAAU,yIAETgG,KAIP,kBAAC,IAAD,CAAmBY,SAAS,MAAM3G,MAAO4G,KACtChB,EAAqB/F,EAAMmB,WAoBlC,OAAO,oCAbP,SAAoBI,GAClB,OAAQA,GACN,IAAK,WACH,OAAOqF,EACT,IAAK,YACH,OAAOI,EACT,IAAK,MACH,OAAOC,EACT,QACE,MAAO,oBAIHC,CAAWlH,EAAMuB,mBCjGd4F,MAdf,SAAiBnH,GACf,OACE,yBACEoB,GAAG,YACHlB,UAAU,qFAEV,kBAAC,EAAD,CACEqB,gBAAiBvB,EAAMuB,gBACvBJ,QAASnB,EAAMmB,YCCRiG,MAbf,WACE,OACE,4BAAQlH,UAAU,6BAChB,wBAAIA,UAAU,mEAAd,iBAGA,wBAAIA,UAAU,qEAAd,gC,OCKSmH,MAZf,SAAuBC,GAEnB,IACMC,EAAa,IAAMD,EACrBE,EAAa,OAKjB,MAPU,yBAGHC,KAAKF,KAEVC,EAAaD,GAERC,GCiFIE,MA7Ef,SAAc1H,GAAO,IAKX2H,EAAWC,cAAXD,OACFE,EAAe,IAAIC,gBAAgBH,GACnCI,EAAaF,EAAaG,IAAI,SAAWH,EAAaG,IAAI,SAAW,MAKrEC,EAAUC,cAZG,EAiBOjC,mBAASkC,EAASJ,IAjBzB,mBAiBZrH,EAjBY,KAiBL0H,EAjBK,OAuBWnC,mBAAS,IAvBpB,mBAuBZ9E,EAvBY,KAuBHkH,EAvBG,OA6B2BpC,mBAAS,YA7BpC,mBA6BZ1E,EA7BY,KA6BKM,EA7BL,KAsDnB,OAnBAyE,qBAAU,WAER,IAAMgC,EAAiB3E,EAAcjD,GACrC2H,EAAWC,KACV,CAAC5H,IAgBF,oCACE,yBACER,UAAU,gGAGV,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASiB,QAASA,IAClB,kBAAC,EAAD,CACET,MAAOA,EACPyB,cAlBR,SAAwBzB,GACtBuH,EAAQ3C,QAAQ,CACdqC,OAAQ,UAAYjH,EAAM4E,QAAQ,IAAK,MAEzC8C,EAAS1H,GACT2H,EAAW1E,EAAcjD,KAcnBa,gBAAiBA,EACjBM,mBAAoBA,IAEtB,kBAAC,EAAD,CACEV,QAASA,EACTI,gBAAiBA,O,QCvEZgH,MAZf,WACE,OACE,kBAAC,IAAD,KACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,UCGUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20cbca4c.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Shade(props) {\n  return (\n    <div\n      data-name=\"shade\"\n      className=\"\"\n      style={{ backgroundColor: props.shade }}\n    ></div>\n  );\n}\n\nexport default Shade;\n","import React from \"react\";\nimport Shade from \"./Shade\";\n\n/**\n * Hold Shades of single Color. It lists all the Shades of the Color passed in props from\n * Pallete component.\n * @param {object} props passed from App->Palette. Single color\n */\nfunction Color(props) {\n  if (!Array.isArray(props.shades)) return false;\n  return (\n    <div className=\"flex-1 rounded p-1\" data-name=\"color-outer\">\n      <div className=\"grid grid-cols-11 gap-1 h-full rounded\" data-name=\"color-inner\">\n        <span className=\"my-auto\">{props.color.toUpperCase()}:</span>\n        {props.shades.map((shade, i) => (\n          <Shade key={i} shade={shade} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Color;\n","import React from \"react\";\nimport Color from \"./Color\";\n\n/**\n * Hold the complete Palette. Which consists of Colors, inside Colors are Shades\n */\nfunction Palette(props) {\n  // get the list of colors from palette\n  const colors = Object.keys(props.palette);\n\n  // render the list of Color components based on colors.map and\n  // pass the shades as props to the Color component, which it will use it to render\n  // list of Shade component\n  return (\n    <div\n      id=\"palette-outer\"\n      className=\"col-span-8 row-span-8 flex-auto bg-white rounded p-1 pl-2\"\n    >\n      <div\n        id=\"palette-inner\"\n        className=\"flex flex-col justify-between h-full rounded overflow-hidden\"\n      >\n        {colors.map((color, i) => (\n          <Color key={i} shades={props.palette[color]} color={color} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Palette;\n","import { tail } from \"lodash\";\nimport React, { useState } from \"react\";\n\n/**\n * WHAT: Menu Item in framework menu. Parent is FrameworkList\n * WHY: There's more than one framework user can chose so it deserves component\n * @param {*} props\n */\nfunction FrameworkItem(props) {\n  /**\n   * WHAT: get pseudo classes for hover: and active: states depends on the framework item\n   * WHY: to get different menu item colors for tailwind, for bootstrap etc\n   * @param {string} framework framework which this item represents\n   * @param {string} activeFramework currently active framework\n   * @returns {string} pseudo classes\n   */\n  const pseudoClasses = (framework, activeFramework) => {\n    //\n    // tailwind item classes\n    const tailwind = {\n      active: \"bg-teal-400 border-teal-400 rounded\",\n      nonActive:\n        \"hover:bg-teal-400 hover:rounded border-teal-400 transition duration-200\",\n    };\n\n    // bootstrap item classes\n    const bootstrap = {\n      active: \"bg-purple-400 border-purple-400 rounded \",\n      nonActive:\n        \"hover:bg-purple-400 hover:rounded border-purple-400 transition duration-200\",\n    };\n\n    // bootstrap item classes\n    const css = {\n      active: \"bg-orange-400 border-orange-400 rounded \",\n      nonActive:\n        \"hover:bg-orange-400 hover:rounded border-orange-400 transition duration-200\",\n    };\n\n    const classes = classes => {\n      if (activeFramework === framework) {\n        return classes.active;\n      } else {\n        return classes.nonActive;\n      }\n    };\n\n    switch (framework) {\n      case \"tailwind\":\n        return classes(tailwind);\n      case \"bootstrap\":\n        return classes(bootstrap);\n      case \"css\":\n        return classes(css);\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <li\n      className={`cursor-pointer p-2 capitalize text-lg mt-2 border-l-4\n      ${pseudoClasses(props.framework, props.activeFramework)}\n      `}\n      onClick={() => props.setActiveFramework(props.framework)}\n    >\n      {props.framework}\n    </li>\n  );\n}\n\nexport default FrameworkItem;\n","import React from \"react\";\n\n// components\nimport FrameworkItem from \"./FrameworkItem\";\n\n/**\n * WHAT: Menu list of frameworks to choose from.\n * The code will display based on active framework\n * @param {*} props\n */\nfunction FrameworkList(props) {\n  return (\n    <ul className=\"pt-12\">\n      <FrameworkItem\n        framework=\"tailwind\"\n        activeFramework={props.activeFramework}\n        setActiveFramework={props.setActiveFramework}\n      />\n      <FrameworkItem\n        framework=\"bootstrap\"\n        activeFramework={props.activeFramework}\n        setActiveFramework={props.setActiveFramework}\n      />\n      <FrameworkItem\n        framework=\"css\"\n        activeFramework={props.activeFramework}\n        setActiveFramework={props.setActiveFramework}\n      />\n    </ul>\n  );\n}\n\nexport default FrameworkList;\n","import React from \"react\";\nimport { AiFillGithub } from \"react-icons/ai\";\n\nexport default function MenuBottom() {\n  return (\n    <>\n      code:\n      <br />\n      <AiFillGithub className=\"inline\" />{\" \"}\n      <a href=\"https://github.com/tombohub/palettolithic\" className=\"underline\">\n        {\" \"}\n        Github\n      </a>\n    </>\n  );\n}\n","import React from 'react';\r\n\r\n// packages\r\nimport { HexColorInput, HexColorPicker } from 'react-colorful';\r\nimport \"react-colorful/dist/index.css\";\r\n\r\n// custom css for color picker\r\nimport \"./menu.css\";\r\n\r\ntype Props = {\r\n    /**\r\n     * color hex value\r\n     */\r\n    color: string,\r\n    onColorChange: (newColor: string) => void\r\n}\r\nexport default function ColorPicker(props: Props) {\r\n    return (\r\n        <>\r\n        <HexColorPicker color={props.color} onChange={props.onColorChange} />\r\n        <HexColorInput\r\n          placeholder={\"HEX code\"}\r\n          color={props.color}\r\n          onChange={props.onColorChange}\r\n          className=\"bg-gray-200 rounded p-2 border w-full \"\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useState } from \"react\";\n\n// components\nimport FrameworkList from \"./FrameworkList\";\nimport MenuBottom from \"./MenuBottom\";\nimport ColorPicker from \"./ColorPicker\";\n\n// packages\nimport { HexColorPicker, HexColorInput } from \"react-colorful\";\nimport \"react-colorful/dist/index.css\";\n\n// custom css for color picker\nimport \"./menu.css\";\n\n\n/**\n * WHAT: menu box to hold color picker and frameworks menu items\n * @param {*} props\n */\nfunction MenuBox(props) {\n  return (\n    <>\n      <div className=\"col-span-2 row-span-7\">\n        <ColorPicker color={props.color} onColorChange={props.onColorChange} />\n        {/* <HexColorPicker color={props.color} onChange={props.onColorChange} />\n        <HexColorInput\n          placeholder={\"HEX code\"}\n          color={props.color}\n          onChange={props.onColorChange}\n          className=\"bg-gray-200 rounded p-2 border w-full \"\n        /> */}\n        <FrameworkList\n          activeFramework={props.activeFramework}\n          setActiveFramework={props.setActiveFramework}\n        />\n\n        <div className=\"mt-32\">\n          <MenuBottom />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default MenuBox;\n","/**\n * Create Palette\n * ==============\n *\n * Module responsible for creating the color palette,\n * based on one single color,\n * and produce the 12 color palette with 9 shades of each color.\n * The colors are in form of HEX codes which are used by specific\n * CSS frameworks to generate their own config code.\n *\n * To create palette this module uses chroma.js package.\n * We need to chose the luminosity of each shade.\n * Saturation and hue is based on initial base color.\n */\n\nconst chroma = require(\"chroma-js\");\n\n/**\n * Names to give each color\n */\nconst names = [\n  \"red\", // 0\n  \"orange\", // 30\n  \"yellow\", // 60\n  \"lime\", // 90\n  \"green\", // 120\n  \"teal\", // 150\n  \"cyan\", // 180\n  \"blue\", // 210\n  \"indigo\", // 240\n  \"violet\", // 270\n  \"purple\", // 300\n  \"pink\", // 330\n  \"red\", // 360\n];\n\n/**\n * What: Get the hue color name from hue number value.\n * Why: to connect the color code with the appropriate color name\n * @param {Number} hue hue value of a color {0..360}\n * @returns {String} name of the color\n */\nconst hueName = (hue) => {\n  const i = Math.round(hue / 30);\n  const name = names[i];\n  return name;\n};\n\n/**\n * WHAT: Array of lightness values, for each color shade.\n *\n * WHY: Lighntess value is use to create shades. From lighter to darker\n */\nconst lights = [0.95, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1];\n\n// const lums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n// .map(n => n + 0.5)\n// .map(n => n / 10);\n\nconst lums = [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05];\n\n/**\n * Creates an array of integers from 0 to {length} we want\n * @param {Number} length length of array you want to create\n */\nconst createArray = (length) => {\n  const arr = [];\n  for (let i = 0; i < length; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/**\n * Creates the Array of hues (colors) starting from base hue and going\n * through the whole hue circle\n * @param {Number} length number of hues we want to get\n * @returns {function} function ti create array of hues\n * @returns {array} list of hues to match the base hue\n */\nconst createHues = (length) => {\n  const hueStep = 360 / length;\n\n  return (baseHue) => {\n    const hues = createArray(length).map((n) => Math.floor((baseHue + n * hueStep) % 360));\n\n    return hues;\n  };\n};\n\n/**\n * Modifies the saturation of a given hex color\n * @param {float} newSaturation new saturation value {0..1}\n * @returns {object} color with new saturation level\n */\nconst desat = (newSaturation) => (hex) => {\n  const [h, s, l] = chroma(hex).hsl();\n  return chroma.hsl(h, newSaturation, l).hex();\n};\n\n/**\n * Creates a darkest gray color in pallete from the base color.\n * First desaturate to {1/8} of base color saturation then returns it with {0.05} luminance.\n * Those values we can change later on.\n * @param {string} hex hex value of color\n * @returns {string} hex value of the darkest gray in palette\n */\nconst createBlack = (hex) => {\n  const black = desat(1 / 8)(hex);\n  return chroma(black).luminance(0.05).hex();\n};\n\n/**\n * Creates shades of single color. Using luminance values.\n * @param {string} hex hex value of color\n * @returns {Array} shade hex values for given color\n */\nconst createShades = (hex) => {\n  const [hue, saturation, lightness] = chroma(hex).hsl();\n  return lights.map((light) => {\n    return chroma.hsl(hue, saturation, light).hex();\n  });\n};\n\n/**\n * WHAT: Creates shades of a single color. Using luminosity.\n * WHY: We need shades to create palette.\n * NOTE: Original code from palx package.\n * @param {string} hex color hex cod\n */\n// const createShades = hex => {\n// return lums.map(lum => {\n//     return chroma(hex).luminance(lum).hex();\n// });\n// };\n\n/**\n * Gets the color name from hex value\n * @param {string} hex color hex value\n * @returns {string} color name {yellow, blue, etc..}\n */\nconst keyword = (hex) => {\n  const [hue, saturation] = chroma(hex).hsl();\n  // if (saturation < 0.5) {\n  // return \"gray\";\n  // }\n  const colorName = hueName(hue);\n  return colorName;\n};\n\n// Reducer\nconst toObj = (a, color) => {\n  const key = a[color.key] ? color.key + \"2\" : color.key;\n  a[key] = color.value;\n  return a;\n};\n\n/* ------------------------------ Main Function ----------------------------- */\n\n/**\n * Creates the whole palette according to one base color\n * @param {string} hex base color hex value\n * @returns {object} 12 hues with 10 shades each in object {color:[hex,...]}\n */\nfunction createPalette(hex) {\n  const color = chroma(hex);\n  const colors = [];\n  const [hue, sat, lte] = color.hsl();\n\n  const hues = createHues(12)(hue);\n\n  // // add darkest color to colors[]\n  // colors.push({\n  // key: \"black\",\n  // value: createBlack(\"\" + color.hex()),\n  // });\n\n  // add shades of gray to colors[]\n  colors.push({\n    key: \"gray\",\n    value: createShades(desat(1 / 25)(\"\" + color.hex())),\n  });\n\n  // add shades of hues to colors[]\n  // temporary fix in case hue is NaN it will go trough list here and on\n  // the website only gray will be shown\n  if (!isNaN(hue)) {\n    hues.forEach((hue) => {\n      const color = chroma.hsl(hue, sat, lte);\n      const key = keyword(color);\n      colors.push({\n        key,\n        value: createShades(\"\" + color.hex()),\n      });\n    });\n  }\n  // console.log({ colors });\n  const obj = colors.reduce(toObj, {});\n\n  return obj;\n}\n\n/**\n *WHAT: generates JS object as {color:{100:hex,200:hex...}..}\n *WHY: we will use it to generate framework specific code. It's more friendly\n * @param {object} palette color pallete like: {color:[hex,...]}\n */\nfunction generateFrameworkObject(palette) {\n  const colors = Object.keys(palette);\n\n  // to assign 100, 200 ... to each shade\n  const assignShades = (color) => {\n    let i = 50;\n    let shades = {};\n    for (const shade of palette[color]) {\n      shades[parseInt(i)] = shade;\n      i = i === 50 ? 100 : i + 100;\n      // i += 100;\n    }\n\n    return shades;\n  };\n\n  let tailwind = {};\n  for (const color of colors) {\n    tailwind[color] = assignShades(color);\n  }\n\n  return tailwind;\n}\n\nexport { createPalette, generateFrameworkObject };\n","import { generateFrameworkObject } from \"./createPalette.js\";\n\nfunction generateTailwind(palette) {\n const frameworkObject = generateFrameworkObject(palette);\n const colorObjects = JSON.stringify(frameworkObject, null, 2)\n  .slice(1, -1)\n  .trim()\n  .replace(/\"([^\"]+)\":/g, \"$1:\")\n  .replace(/\\n/g, \"\\n    \");\n\n const tailwindCode = `// tailwind.config.js\nmodule.exports = {\n  theme: {\n    colors: {\n      transparent: \"transparent\",\n      current: \"currentColor\",\n      ${colorObjects}\n    }\n  }\n}`;\n\n return tailwindCode;\n}\n\nexport { generateTailwind };\n","/* -------------------------------------------------------------------------- */\n/*                 Generating Bootstrap custom code for theming                 */\n/* -------------------------------------------------------------------------- */\n\nimport { generateFrameworkObject } from \"./createPalette.js\";\n\n/**\n * WHAT: generates color variables for bootstrap\n * WHY: it's part of the bootstrap theming\n * @param {object} frameworkObject framework object from palette\n */\nfunction generateColorVariables(obj) {\n  let variables = \"\";\n  for (const color in obj) {\n    variables += \"\\n\";\n    for (const [shade, hex] of Object.entries(obj[color])) {\n      variables += `$${color}-${shade}: ${hex}; \\n`;\n    }\n  }\n\n  return variables;\n}\n\n/**\n * WHAT: generates the Bootstrap scss variables for css\n * WHY: Botstrap uses these variables to generate vanilla css variables\n */\nfunction generateCssColors(obj) {\n  let variables = \"\";\n  for (const color in obj) {\n    variables += `$${color}: $${color}-500;\\n`;\n  }\n  return variables;\n}\n\n/**\n * WHAT: generates scss theme-colors() map\n * WHY: bootstrap generates classes names from this map\n * @param {frameworkObject} obj frameworks friendly object derived from palette object\n */\nfunction generateThemeMap(obj) {\n  let colors = \"\";\n\n  for (const color in obj) {\n    colors += \"\\n\";\n    for (const shade in obj[color]) {\n      colors += `  \"${color}-${shade}\": $${color}-${shade},\\n`;\n    }\n  }\n  const map = `$theme-colors: (\\n` + `${colors}` + `);`;\n  return map;\n}\n\n/* ------------------------------ Main Function ----------------------------- */\n\n/**\n * WHAT: generates complete custom code for Bootstrap\n * WHY: user can copy paste code to theme Bootstrap\n * @param {object} palette palette object as {color:[hex1, hex2,...]}\n */\nfunction generateBootstrap(palette) {\n  const frameworkObject = generateFrameworkObject(palette);\n\n  const variables = generateColorVariables(frameworkObject);\n  const cssColors = generateCssColors(frameworkObject);\n  const map = generateThemeMap(frameworkObject);\n\n  const bootstrapCode = `${variables}\\n\\n${cssColors}\\n\\n${map}`;\n\n  return bootstrapCode;\n}\n\nexport { generateBootstrap };\n","import {\n    generateFrameworkObject\n} from \"./createPalette.js\";\n\n\n\n/**\n * Generates CSS color variables template\n * @param {object} palette palette object generated by user choosing color\n */\nfunction generateCssVariables(palette) {\n    const frameworkObject = generateFrameworkObject(palette);\n    let variables = \"\";\n    for (const color in frameworkObject) {\n        variables += \"\\n\";\n        for (const [shade, hex] of Object.entries(frameworkObject[color])) {\n            variables += `--${color}-${shade}: ${hex}; \\n`;\n        }\n    }\n\n    const cssCode = `:root {\n                ${variables}\n}`\n\n    return cssCode\n}\n\nexport {\n    generateCssVariables\n}","import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\n// scripts\nimport { generateTailwind } from \"../scripts/generateTailwind\";\nimport { generateBootstrap } from \"../scripts/generateBootstrap\";\nimport { generateCssVariables } from \"../scripts/generateCssVariables\";\n\n// packages\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport js from \"react-syntax-highlighter/dist/esm/languages/hljs/javascript\";\nimport scss from \"react-syntax-highlighter/dist/esm/languages/hljs/scss\";\nimport css from \"react-syntax-highlighter/dist/esm/languages/hljs/css\";\nimport { tomorrowNight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\n/**\n * Actual code of chosen framework. All the frameworks will render here because we\n * want to use syntax highlighter in one place.\n *\n */\nfunction CodeContent(props) {\n  //\n  /**\n   * WHAT: state if code is copied.\n   * WHY: so the user gets feedback if code is copied to clipboard.\n   * It uses useEffect to change back to 'Copy' anytime the palette or active framework changes.\n   * When user clicks on \"Copy\" span button then the handleOnClick sets the state to \"Copied\"\n   */\n  const [copyStatus, setCopyStatus] = useState(\"Copy\");\n\n  useEffect(() => {\n    setCopyStatus(\"Copy\");\n  }, [props.palette, props.activeFramework]);\n\n  function handleOnClick(e) {\n    setCopyStatus(\"Copied\");\n  }\n\n  /* ------------------------------ Code handle ----------------------------- */\n\n  /**\n   * This part of code applies syntax highlighting and copy button\n   */\n\n  SyntaxHighlighter.registerLanguage(\"javascript\", js);\n  SyntaxHighlighter.registerLanguage(\"scss\", scss);\n  SyntaxHighlighter.registerLanguage(\"css\", css);\n\n  const tailwindCode = (\n    <>\n      <CopyToClipboard text={generateTailwind(props.palette)}>\n        <div className=\"flex justify-end\">\n          <span\n            onClick={handleOnClick}\n            className=\"cursor-pointer font-mono bg-teal-300 rounded text-teal-900 px-1 hover:bg-teal-900 hover:text-teal-300 transition duration-100\"\n          >\n            {copyStatus}\n          </span>\n        </div>\n      </CopyToClipboard>\n      <SyntaxHighlighter language=\"javascript\" style={tomorrowNight}>\n        {generateTailwind(props.palette)}\n      </SyntaxHighlighter>\n    </>\n  );\n\n  const bootstrapCode = (\n    <>\n      <CopyToClipboard text={generateBootstrap(props.palette)}>\n        <div className=\"flex justify-end\">\n          <span\n            onClick={handleOnClick}\n            className=\"cursor-pointer font-mono bg-purple-300 rounded text-purple-900 px-1 hover:bg-purple-900 hover:text-purple-300 transition duration-100\"\n          >\n            {copyStatus}\n          </span>\n        </div>\n      </CopyToClipboard>\n      <SyntaxHighlighter language=\"scss\" style={tomorrowNight}>\n        {generateBootstrap(props.palette)}\n      </SyntaxHighlighter>\n    </>\n  );\n\n\n  const cssCode = (\n    <>\n      <CopyToClipboard text={generateCssVariables(props.palette)}>\n        <div className=\"flex justify-end\">\n          <span\n            onClick={handleOnClick}\n            className=\"cursor-pointer font-mono bg-orange-300 rounded text-orange-900 px-1 hover:bg-orange-900 hover:text-orange-300 transition duration-100\"\n          >\n            {copyStatus}\n          </span>\n        </div>\n      </CopyToClipboard>\n      <SyntaxHighlighter language=\"css\" style={tomorrowNight}>\n        {generateCssVariables(props.palette)}\n      </SyntaxHighlighter>\n    </>\n  );\n\n  /* -------------------------------- Render -------------------------------- */\n\n  function renderCode(activeFramework) {\n    switch (activeFramework) {\n      case \"tailwind\":\n        return tailwindCode;\n      case \"bootstrap\":\n        return bootstrapCode;\n      case \"css\":\n        return cssCode;\n      default:\n        return \"nothing selected\";\n    }\n  }\n\n  return <>{renderCode(props.activeFramework)}</>;\n}\n\nexport default CodeContent;\n","import React from \"react\";\n\n// components\nimport CodeContent from \"./CodeContent\";\n\n/**\n * Box in which we will render the code of chosen framework\n *\n */\nfunction CodeBox(props) {\n  return (\n    <div\n      id=\"code-area\"\n      className=\"col-span-2 row-span-7 bg-gray-900 text-sm text-gray-100 p-2 rounded overflow-auto\"\n    >\n      <CodeContent\n        activeFramework={props.activeFramework}\n        palette={props.palette}\n      />\n    </div>\n  );\n}\n\nexport default CodeBox;\n","import React from \"react\";\n\n/**\n * WHAT: holds the title of the website\n */\nfunction Header() {\n  return (\n    <header className=\"col-span-4 rounded shadow\">\n      <h1 className=\"lg:text-4xl md:text-3xl text-gray-900 font-frijole inline-block\">\n        Palettolithic\n      </h1>\n      <h6 className=\"font-schoolbell md:text-xl lg:text-2xl text-gray-800 inline-block\">\n        So easy caveman can do it.\n      </h6>\n    </header>\n  );\n}\n\nexport default Header;\n","/**\r\n * Cleans the color argument/route provided in the URL\r\n */\r\n\r\nfunction sanitizeColor(hexColor)\r\n  {\r\n    const reg=/^#([0-9a-f]{3}){1,2}$/i;\r\n    const dirtyColor = '#' + hexColor;\r\n    let cleanColor = \"#07c\";\r\n    if(reg.test(dirtyColor))\r\n    {\r\n      cleanColor = dirtyColor\r\n    }\r\n    return cleanColor;\r\n}\r\n\r\nexport default sanitizeColor;","import React, { useEffect, useState } from \"react\";\r\n\r\n// components\r\nimport Palette from \"./Palette\";\r\nimport MenuBox from \"./MenuBox\";\r\nimport CodeBox from \"./CodeBox\";\r\nimport Header from \"./Header\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Sanitize from \"../scripts/sanitizeColor\";\r\n\r\n// scripts\r\nimport { createPalette } from \"../scripts/createPalette.js\";\r\n\r\n/**\r\n * Main component that displays the first page with form and palette\r\n * @param {object} props palette and onSubmit\r\n */\r\nfunction Main(props) {\r\n  /**\r\n   * WHAT: color provided in the URL using react-router-dom\r\n   * WHY: allow a user to provide a color upon starting the page\r\n   */\r\n  const { search } = useLocation();\r\n  const searchParams = new URLSearchParams(search);\r\n  const colorParam = searchParams.get('color') ? searchParams.get('color') : '07c';\r\n  /**\r\n   * WHAT: enabling the history function from react-router-dom\r\n   * WHY: allows the URL Parameter to be updated with the color\r\n   */\r\n  const history = useHistory();\r\n  /**\r\n   *WHAT: current color from color picker, or input field\r\n   *WHY: we need it to create palette from. It's in Main so it can be passed to Palette\r\n   */\r\n  const [color, setColor] = useState(Sanitize(colorParam));\r\n\r\n  /**\r\n   * Palette is the collection of shades for each color. Curently 12 colors with 10 shades each.\r\n   * {color:[shades],....}. createPalette function is used to create a collection after form submit\r\n   */\r\n  const [palette, setPalette] = useState({});\r\n\r\n  /**\r\n   * WHAT: framework selected in the menu\r\n   * WHY: code will be displayed in CodeBox based on active framework\r\n   */\r\n  const [activeFramework, setActiveFramework] = useState(\"tailwind\");\r\n\r\n  /**\r\n   * WHAT: renders the initial demo pallete on first page visit\r\n   * WHY: so user can immediately see an example\r\n   */\r\n  useEffect(() => {\r\n\r\n    const initialPallete = createPalette(color);\r\n    setPalette(initialPallete);\r\n  }, [color]);\r\n\r\n  /**\r\n   * WHAT: handles the onChange of color picker.\r\n   * WHY: theres no e.target.value because color pickier component passes color immediately\r\n   * @param {string} color color hex code\r\n   */\r\n  function handleOnChange(color) {\r\n    history.replace({\r\n      search: '?color=' + color.replace('#', '')\r\n    })\r\n    setColor(color);\r\n    setPalette(createPalette(color));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"font-mono text-gray-900 bg-white p-2 h-screen w-screen grid\r\n                    grid-cols-12 grid-rows-8 gap-2\"\r\n      >\r\n        <Header />\r\n        <Palette palette={palette} />\r\n        <MenuBox\r\n          color={color}\r\n          onColorChange={handleOnChange}\r\n          activeFramework={activeFramework}\r\n          setActiveFramework={setActiveFramework}\r\n        />\r\n        <CodeBox\r\n          palette={palette}\r\n          activeFramework={activeFramework}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Main from \"./components/Main\";\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <>\r\n        <Route>\r\n          <Main />\r\n        </Route>\r\n      </>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/main.css\";\nimport \"fontsource-frijole\";\nimport \"fontsource-schoolbell\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}